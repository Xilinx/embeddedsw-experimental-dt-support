
set (CMAKE_INSTALL_LIBDIR "lib")
function (collector_create name base)
  set_property (GLOBAL PROPERTY "COLLECT_${name}_LIST")
  set_property (GLOBAL PROPERTY "COLLECT_${name}_BASE" "${base}")
endfunction (collector_create)

function (collector_list var name)
  get_property (_list GLOBAL PROPERTY "COLLECT_${name}_LIST")
  set (${var} "${_list}" PARENT_SCOPE)
endfunction (collector_list)

function (collector_base var name)
  get_property (_base GLOBAL PROPERTY "COLLECT_${name}_BASE")
  set (${var} "${_base}" PARENT_SCOPE)
endfunction (collector_base)

function (collect name)
  collector_base (_base ${name})
  string(COMPARE NOTEQUAL "${_base}" "" _is_rel)
  set (_list)
  foreach (s IN LISTS ARGN)
    if (_is_rel)
      get_filename_component (s "${s}" ABSOLUTE)
      file (RELATIVE_PATH s "${_base}" "${s}")
    endif (_is_rel)
    list (APPEND _list "${s}")
  endforeach ()
  set_property (GLOBAL APPEND PROPERTY "COLLECT_${name}_LIST" "${_list}")
endfunction (collect)

function(LIST_INDEX index match PROP)
    foreach (prop ${PROP})
        if ("${prop}" STREQUAL "${match}")
            set(index ${index} PARENT_SCOPE)
            return()
        endif()
        MATH(EXPR index "${index}+1")
    endforeach()
endfunction()

function (linker_gen path)
	SET(MEM_NODE_INSTANCES "${TOTAL_MEM_CONTROLLERS}" CACHE STRING "Memory Controller")
	SET_PROPERTY(CACHE MEM_NODE_INSTANCES PROPERTY STRINGS "${TOTAL_MEM_CONTROLLERS}")
	list(LENGTH MEM_NODE_INSTANCES _len)
	if (${_len} EQUAL 1)
	    set(DDR ${MEM_NODE_INSTANCES})
	endif()
	if(("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "cortexa72")
		OR ("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "cortexa53")
		OR ("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "cortexa53-32")
		OR ("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "aarch64"))
	configure_file(${path}/lscript_a53.ld.in ${CMAKE_SOURCE_DIR}/lscript.ld)
	endif()

	if(("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "microblaze") OR
	   ("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "microblazeel") OR
	   ("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "plm_microblaze") OR
	   ("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "pmu_microblaze"))
	configure_file(${path}/lscript_mb.ld.in ${CMAKE_SOURCE_DIR}/lscript.ld)
	endif()

	if(("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "cortexr5"))
            if("${CMAKE_MACHINE}" STREQUAL "Versal")
	        execute_process(COMMAND ${CMAKE_COMMAND} -E copy ${path}/cortexr5_versal.ld ${CMAKE_SOURCE_DIR}/cortexr5_versal.ld)
	        configure_file(${path}/lscript_versal_r5.ld.in ${CMAKE_SOURCE_DIR}/lscript.ld)
	    else()
	        execute_process(COMMAND ${CMAKE_COMMAND} -E copy ${path}/cortexr5.ld ${CMAKE_SOURCE_DIR}/cortexr5.ld)
	        configure_file(${path}/lscript_r5.ld.in ${CMAKE_SOURCE_DIR}/lscript.ld)
	    endif()
	endif()

	if(("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "cortexa9"))
	configure_file(${path}/lscript_a9.ld.in ${CMAKE_SOURCE_DIR}/lscript.ld)
	endif()
endfunction(linker_gen)

function(gen_exheader path drvname addr prefix)
    string(TOUPPER ${drvname} DRVNAME)
    set(ADDR_DEFINE "#define X${DRVNAME}_BASEADDRESS ${addr}U")

    if (NOT ${prefix})
        set(DRVNAME X${DRVNAME})
        configure_file(${path}/example.h.in ${CMAKE_SOURCE_DIR}/${prefix}${drvname}_example.h)
    else()
        configure_file(${path}/example.h.in ${CMAKE_SOURCE_DIR}/${drvname}_example.h)
    endif()
endfunction(gen_exheader)
